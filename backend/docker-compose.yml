services:

  db:
    image: postgres:16-alpine
    restart: always
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - usernet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 60s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    restart: always
    env_file:
      - .env
    ports:
      - "5050:80"
    networks:
      - usernet
    depends_on:
      db:
        condition: service_healthy

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    networks:
      - usernet
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 60s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    env_file:
      - .env
    networks:
      - usernet
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 60s
      timeout: 10s
      retries: 5
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    restart: always
    depends_on:
      user-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      REDIS_URL: redis://:${REDIS_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}/${APIGATEWAY_SERVICE_REDIS_DB}
    volumes:
      - ./shared:/app/shared:ro
    ports:
      - "8000:8000"
    networks:
      - usernet
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 10s
      retries: 3
  
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    restart: always  
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${USER_SERVICE_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}/${USER_SERVICE_REDIS_DB}
    volumes:
      - ./shared:/app/shared:ro
    ports:
      - "8001:8001"
    networks:
      - usernet
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 60s
      timeout: 10s
      retries: 3

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${PRODUCT_SERVICE_DB}
      MEDIA_ROOT: /media
      REDIS_URL: redis://:${REDIS_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}/${PRODUCT_SERVICE_REDIS_DB}
    volumes:
      - product_media:/media
      - ./shared:/app/shared:ro
    ports:
      - "8002:8002"
    networks:
      - usernet
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 60s
      timeout: 10s
      retries: 3

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${NOTIFICATION_SERVICE_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}/${NOTIFICATION_SERVICE_REDIS_DB}
      RABBITMQ_BROKER_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@${RABBITMQ_HOST}:${RABBITMQ_PORT}
    ports:
      - "8003:8003"
    networks:
      - usernet
    volumes:
      - ./shared:/app/shared:ro
      - ./shared/templates:/app/templates:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 60s
      timeout: 10s
      retries: 3

  notification-consumer:
    build:
      context: ./notification-consumer
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8004:8004"
    depends_on:
      rabbitmq:
        condition: service_healthy
      notification-service:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - usernet
    volumes:
      - ./shared:/app/shared:ro
    # healthcheck implementation?


  admin-js-service:
    build:
      context: ./admin-js-service
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
    networks:
      - usernet

networks:
  usernet:
    
volumes:
  postgres_data:
  product_media:
  redis_data:
  rabbitmq_data:


  # traefik:
  #   image: traefik:v2.10
  #   command:
  #     - "--api.insecure=false"
  #     - "--providers.docker=true"
  #     - "--providers.docker.exposedbydefault=false"
  #     - "--entrypoints.web.address=:80"
  #     - "--entrypoints.websecure.address=:443"
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - ./traefik.yml:/etc/traefik/traefik.yml:ro
  #     - ./acme.json:/acme.json


    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.service1.rule=PathPrefix(`/api/service1`)"
    #   - "traefik.http.services.service1.loadbalancer.server.port=8000"
    #   - "traefik.http.middlewares.secure-headers.headers.sslredirect=true"
    #   - "traefik.http.middlewares.secure-headers.headers.stsincludesubdomains=true"
    #   - "traefik.http.middlewares.secure-headers.headers.stspreload=true"
    #   - "traefik.http.middlewares.secure-headers.headers.stsseconds=31536000"
    #   - "traefik.http.middlewares.ratelimit.ratelimit.average=100"
    #   - "traefik.http.middlewares.ratelimit.ratelimit.burst=50"

  # prometheus:
  #   image: prom/prometheus
  #   volumes:
  #     - ./prometheus:/etc/prometheus
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.prometheus.rule=Host(`prometheus.yourdomain.com`)"

  # grafana:
  #   image: grafana/grafana
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.grafana.rule=Host(`grafana.yourdomain.com`)"

# volumes:
#   prometheus_data:
#   grafana_data: