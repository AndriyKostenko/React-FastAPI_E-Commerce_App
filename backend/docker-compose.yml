services:

  db:
    image: postgres:16-alpine
    restart: always
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - usernet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    restart: always
    env_file:
      - .env
    ports:
      - "5050:80"
    networks:
      - usernet
    depends_on:
      db:
        condition: service_healthy

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    networks:
      - usernet
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    restart: always  
    depends_on:
      db:
        condition: service_healthy
    env_file:
    # specifing common and specifig settings
      - .env
      - ./user-service/.env
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${USER_SERVICE_DB}
    ports:
      - "8000:8000"
    networks:
      - usernet
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # product-service:
  #   build:
  #     context: ./product-service
  #     dockerfile: Dockerfile
  #   restart: always
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   env_file:
  #   # specifing common '.env' and specifig '.env' settings
  #     - .env
  #     - ./product-service/.env
  #   environment:
  #     DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${PRODUCT_SERVICE_DB}
  #     MEDIA_ROOT: /media
  #   volumes:
  #     - product_media:/media
  #   ports:
  #     - "8001:8001"
  #   networks:
  #     - usernet
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  admin-js-service:
    build:
      context: ./admin-js-service
      dockerfile: Dockerfile
    env_file:
      - .env
      - ./admin-js-service/.env
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - usernet

networks:
  usernet:
    
volumes:
  postgres_data:
  product_media:


  # traefik:
  #   image: traefik:v2.10
  #   command:
  #     - "--api.insecure=false"
  #     - "--providers.docker=true"
  #     - "--providers.docker.exposedbydefault=false"
  #     - "--entrypoints.web.address=:80"
  #     - "--entrypoints.websecure.address=:443"
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - ./traefik.yml:/etc/traefik/traefik.yml:ro
  #     - ./acme.json:/acme.json


    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.service1.rule=PathPrefix(`/api/service1`)"
    #   - "traefik.http.services.service1.loadbalancer.server.port=8000"
    #   - "traefik.http.middlewares.secure-headers.headers.sslredirect=true"
    #   - "traefik.http.middlewares.secure-headers.headers.stsincludesubdomains=true"
    #   - "traefik.http.middlewares.secure-headers.headers.stspreload=true"
    #   - "traefik.http.middlewares.secure-headers.headers.stsseconds=31536000"
    #   - "traefik.http.middlewares.ratelimit.ratelimit.average=100"
    #   - "traefik.http.middlewares.ratelimit.ratelimit.burst=50"

  # prometheus:
  #   image: prom/prometheus
  #   volumes:
  #     - ./prometheus:/etc/prometheus
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.prometheus.rule=Host(`prometheus.yourdomain.com`)"

  # grafana:
  #   image: grafana/grafana
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.grafana.rule=Host(`grafana.yourdomain.com`)"

# volumes:
#   prometheus_data:
#   grafana_data: